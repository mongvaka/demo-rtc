<div video-grid></div>
<h1 style="text-align:center">@ViewBag.roomId</h1>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/peerjs@1.5.1/dist/peerjs.min.js"></script>

<script>

    const ROOM_ID = @ViewBag.roomId
    let userId = null
    let localStream = null
    const Peers = {};
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/meeting").build();

    const myPeer = new Peer()
    myPeer.on('open', id => {
        userId = id;
        console.log(`userId : ${userId}`)
        console.log(`ROOM_ID : ${ROOM_ID}`)

        const startSignalR = async () => {
            await connection.start();
            await connection.invoke("JoinRoom", `${ROOM_ID}`, userId);
        }
        startSignalR();
    })
    const videoGrid = document.querySelector('[video-grid]')
    const myVideo = document.createElement('video')
    //myVideo.muted = true
    navigator.mediaDevices.getUserMedia(
        {
            audio: true,
            video: true
        }
    ).then(stream => {
        addVideoStream(myVideo, stream);
        localStream = stream
    });
    connection.on('user-connected', id => {
        if (userId === id) return;
        console.log(`user connected :  ${id}`)
        connectNewUser(id,localStream);
    })
    connection.on('user-disconnected', id => {
        console.log(`user disconnected : ${id}`)
        if (Peers[id]) Peers[id].close()
    })
    myPeer.on('call', call => {
        call.answer(localStream)
        const userVideo = document.createElement('video')
        call.on('stream', userVideoStream => {
            addVideoStream(userVideo, userVideoStream)
        })
    })
    const addVideoStream = (video, stream )=> {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play()
        })
        videoGrid.appendChild(video);

    }
    const connectNewUser = (userId, localStream) => {
        const userVideo = document.createElement('video');
        const call = myPeer.call(userId, localStream);

        call.on('stream', userVideoStream => {
            addVideoStream(userVideo, userVideoStream);
        })
        call.on('close', () => {
            userVideo.remove()
        })
        Peers[userId] = call
    }
    </script>